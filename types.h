#pragma once

/* Exit code errors

1 : log file error
2 : fork error
3 : shm error
4 : signal error
5 : rand_syscall error
6 : malloc error
7 : update_app_stats error
8 : pipe error
9 : signal blocking error
10: select error
11: semaphore error
12: app segfault
13: nanosleep error

*/

#include <stdbool.h>
#include <sys/types.h>

#define PIPE_READ 0
#define PIPE_WRITE 1

// Interruptions generated by the InterController Sim
typedef enum {
  IRQ_TIME, // Timeslice finished
  IRQ_D1,   // Device D1 interrupt
  IRQ_D2    // Device D2 interrupt
} irq_t;

// System calls requested by application process
typedef enum {
  SYSCALL_NONE,        // No syscall requested
  SYSCALL_D1_R,        // Read from device D1
  SYSCALL_D1_W,        // Write to device D1
  SYSCALL_D1_X,        // Execute on device D1
  SYSCALL_D2_R,        // Read from device D2
  SYSCALL_D2_W,        // Write to device D2
  SYSCALL_D2_X,        // Execute on device D2
  SYSCALL_APP_FINISHED // Application process has finished
} syscall_t;
// String description of the syscalls
extern const char *SYSCALL_STR[];

// Application process states
typedef enum {
  RUNNING, // Process is active
  BLOCKED, // Process is waiting for device interrupt
  PAUSED,  // Process is waiting for a SIGCONT
  FINISHED // Process has finished executing (PC >= APP_MAX_PC)
} proc_state_t;
// String description of app process states
extern const char *PROC_STATE_STR[];

// Contains information about each application process.
// These are all set by kernelsim
typedef struct {
  int app_id; // App ID, same as apps array index
  pid_t app_pid;
  int D1_access_count; // Amount of syscalls to D1
  int D2_access_count; // Amount of syscalls to D2
  int read_count;      // Amount of R syscalls
  int write_count;     // Amount of W syscalls
  int exec_count;      // Amount of X syscalls
  proc_state_t state;  // Current state of the process
} proc_info_t;

// Queue node
typedef struct node_t {
  int data;
  struct node_t *next;
} node_t;

// Queue of app_ids waiting for device IO
typedef struct {
  node_t *front;
  node_t *rear;
} queue_t;
